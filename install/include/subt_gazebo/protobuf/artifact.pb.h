// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifact.proto

#ifndef PROTOBUF_artifact_2eproto__INCLUDED
#define PROTOBUF_artifact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
// @@protoc_insertion_point(includes)

namespace subt {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_artifact_2eproto();
void protobuf_AssignDesc_artifact_2eproto();
void protobuf_ShutdownFile_artifact_2eproto();

class Artifact;

// ===================================================================

class Artifact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subt.msgs.Artifact) */ {
 public:
  Artifact();
  virtual ~Artifact();

  Artifact(const Artifact& from);

  inline Artifact& operator=(const Artifact& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Artifact& default_instance();

  void Swap(Artifact* other);

  // implements Message ----------------------------------------------

  inline Artifact* New() const { return New(NULL); }

  Artifact* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Artifact& from);
  void MergeFrom(const Artifact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Artifact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional .ignition.msgs.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* mutable_pose();
  ::ignition::msgs::Pose* release_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // @@protoc_insertion_point(class_scope:subt.msgs.Artifact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ignition::msgs::Pose* pose_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_artifact_2eproto();
  friend void protobuf_AssignDesc_artifact_2eproto();
  friend void protobuf_ShutdownFile_artifact_2eproto();

  void InitAsDefaultInstance();
  static Artifact* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Artifact

// optional uint32 type = 1;
inline void Artifact::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Artifact::type() const {
  // @@protoc_insertion_point(field_get:subt.msgs.Artifact.type)
  return type_;
}
inline void Artifact::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:subt.msgs.Artifact.type)
}

// optional .ignition.msgs.Pose pose = 2;
inline bool Artifact::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
inline void Artifact::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::ignition::msgs::Pose& Artifact::pose() const {
  // @@protoc_insertion_point(field_get:subt.msgs.Artifact.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::ignition::msgs::Pose* Artifact::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:subt.msgs.Artifact.pose)
  return pose_;
}
inline ::ignition::msgs::Pose* Artifact::release_pose() {
  // @@protoc_insertion_point(field_release:subt.msgs.Artifact.pose)
  
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Artifact::set_allocated_pose(::ignition::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:subt.msgs.Artifact.pose)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace subt

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artifact_2eproto__INCLUDED
